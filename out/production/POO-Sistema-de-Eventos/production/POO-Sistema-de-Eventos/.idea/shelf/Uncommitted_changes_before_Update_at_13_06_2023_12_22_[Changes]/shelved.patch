Index: src/model/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.model;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.border.EmptyBorder;\n\nimport src.controller.ControleEventos;\nimport src.views.InscricaoEventoForm;\nimport src.views.RegistroPresencaForm;\nimport src.views.cadastroforms.CadastroEvento;\nimport src.views.cadastroforms.CadastroOrganizador;\nimport src.views.cadastroforms.CadastroParticipante;\n\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.GridLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Menu extends JFrame {\n\n    // -------------- Instância dos Objetos ----------------------\n    ControleEventos cEventos = new ControleEventos();\n    Evento evento = new Evento();\n\n    // ----------- Listas ---------------\n    List<Evento> eventosNaoOcorridos = new ArrayList<>();\n    ArrayList<JButton> botoes = new ArrayList<>();\n\n    // ---------- Variáveis de Controle -----------------------\n    int organizadorCadastrado = 0;\n    int eventoCadastrado = 0;\n    int participanteCadastrado = 0;\n\n    public Menu() {\n\n        setTitle(\"Sistema de Controle de Eventos\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(600, 600);\n\n        ImageIcon imageIcon = new ImageIcon(\"src/img/logo.png\");\n\n        JPanel panel = new JPanel(new FlowLayout(10, 10, 10));\n        panel.setBorder(new EmptyBorder(10, 40, 10, 40));\n\n        JPanel buttonPanel = new JPanel(new GridLayout(0, 2, 12, 12));\n        buttonPanel.setBorder(new EmptyBorder(20, 20, 10, 40));\n\n        JLabel op = new JLabel(\"Escolha uma opção:\");\n        JLabel label = new JLabel(imageIcon);\n        label.checkImage(getIconImage(), 600, 200, label);\n        label.setBorder(new EmptyBorder(10, 20, 10, 20));\n\n        panel.add(label);\n        panel.add(op);\n        panel.add(buttonPanel);\n\n        JButton btnCadastrarOrganizador = new JButton(\"Cadastrar Organizador\");\n        JButton btnCadastrarEvento = new JButton(\"Cadastrar Evento\");\n        JButton btnCadastrarParticipante = new JButton(\"Cadastrar Participante\");\n        JButton btnInscreverParticipante = new JButton(\"Inscrever Participante no Evento\");\n        JButton btnRegistrarPresenca = new JButton(\"Registrar Presença do participante\");\n        JButton btnBuscarEvento = new JButton(\"Buscar por Evento\");\n        JButton btnAgendaEventos = new JButton(\"Agenda de Eventos\");\n        JButton btnRelatorio = new JButton(\"Relatório\");\n\n        botoes.addAll(Arrays.asList(btnCadastrarOrganizador, btnCadastrarEvento, btnCadastrarParticipante,\n                btnInscreverParticipante,\n                btnRegistrarPresenca, btnBuscarEvento, btnAgendaEventos, btnRelatorio));\n\n        for (JButton botao : botoes) {\n            botao.setSelected(true);\n            botao.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n            buttonPanel.add(botao);\n        }\n\n        // ------------ Cadastrar Organizador ------------------------\n        btnCadastrarOrganizador.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                CadastroOrganizador cadastroOrganizador = new CadastroOrganizador(evento.getOrganizadores());\n                cadastroOrganizador.setVisible(true);\n                organizadorCadastrado++;\n            }\n        });\n\n        // ----------- Cadastrar Evento -------------------------\n        btnCadastrarEvento.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                if (organizadorCadastrado > 0) {\n                    CadastroEvento formulario = new CadastroEvento(cEventos.getEventos(), evento.getOrganizadores());\n                    formulario.setVisible(true);\n                    eventoCadastrado++;\n\n                } else {\n                    JOptionPane.showMessageDialog(null, \"Não há organizadores cadastrados!\");\n                }\n\n            }\n\n        });\n\n        // ----------- Cadastrar Participante -------------------------\n        btnCadastrarParticipante.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                if (eventoCadastrado > 0) {\n                    cEventos.listarEventoCompleto(cEventos.getEventos(), evento.getOrganizadores());\n                    CadastroParticipante cadastroParticipante = new CadastroParticipante(evento.getParticipantes());\n                    cadastroParticipante.setVisible(true);\n                    participanteCadastrado++;\n                } else {\n                    JOptionPane.showMessageDialog(null, \"Não há eventos cadastrados!\");\n                }\n\n            }\n        });\n\n        // ----------- Inscrever Participante -------------------------\n        btnInscreverParticipante.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                if (participanteCadastrado <= 0) {\n                    JOptionPane.showMessageDialog(null, \"Não há participantes disponíveis para inscrição!\");\n                } else {\n\n                    eventosNaoOcorridos = cEventos.listarEventosNaoOcorridos(cEventos.getEventos());\n\n                    if (eventosNaoOcorridos.size() <= 0) {\n                        JOptionPane.showMessageDialog(null, \"Não há eventos disponíveis para inscrição!\");\n                    }\n\n                    else {\n\n                        InscricaoEventoForm inscricaoEventoForm = new InscricaoEventoForm(eventosNaoOcorridos,\n                                evento.getParticipantes());\n                        inscricaoEventoForm.setVisible(true);\n\n                    }\n                }\n            }\n\n        });\n        btnRegistrarPresenca.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                if (participanteCadastrado <= 0) {\n                    JOptionPane.showMessageDialog(null, \"Não há participantes disponíveis para inscrição de presença!\");\n                }\n                else {\n                    eventosNaoOcorridos = cEventos.listarEventosNaoOcorridos(cEventos.getEventos());\n\n                    if (eventosNaoOcorridos.size() <= 0) {\n                        JOptionPane.showMessageDialog(null, \"Não há eventos disponíveis para inscrição!\");\n                    }\n\n\n                    else {\n\n                        RegistroPresencaForm registroPresencaForm = new RegistroPresencaForm(eventosNaoOcorridos,evento.getParticipantes(),evento.getParticipantesPresentes());\n                        registroPresencaForm.setVisible(true);\n\n                    }\n                }\n            }\n\n        });\n\n\n\n        getContentPane().add(panel, BorderLayout.CENTER);\n        setLocationRelativeTo(null);\n\n        setVisible(true);\n\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                new Menu();\n            }\n        });\n    }\n\n}\n
===================================================================
diff --git a/src/model/Menu.java b/src/model/Menu.java
--- a/src/model/Menu.java	
+++ b/src/model/Menu.java	
@@ -140,7 +140,7 @@
 
                     eventosNaoOcorridos = cEventos.listarEventosNaoOcorridos(cEventos.getEventos());
 
-                    if (eventosNaoOcorridos.size() <= 0) {
+                    if (eventosNaoOcorridos.size()  <= 0) {
                         JOptionPane.showMessageDialog(null, "Não há eventos disponíveis para inscrição!");
                     }
 
Index: src/views/RegistroPresencaForm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.views;\n\nimport src.model.Evento;\nimport src.model.Participante;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.List;\n\npublic class RegistroPresencaForm extends JFrame {\n    private static JComboBox<String> fieldEventos;\n    private static JTextField fieldParticipantes;\n    private static JComboBox<String> fieldPresente;\n    private Participante participante;\n\n\n    public RegistroPresencaForm(List<Evento> eventos, List<Participante> participantes, List<Participante> participantesPresentes) {\n            setTitle(\"Registro de presença\");\n\n\n        JPanel panel = new JPanel();\n        panel.setLayout(new GridBagLayout());\n        panel.setBorder(BorderFactory.createEmptyBorder(20, 10, 20, 10));\n        panel.setPreferredSize(new Dimension(500, 400));\n\n        GridBagConstraints constraints = new GridBagConstraints();\n        constraints.fill = GridBagConstraints.HORIZONTAL;\n        constraints.insets = new Insets(5, 5, 10, 5);\n\n        JLabel labelEvento = new JLabel(\"Qual evento você quer registrar presença?\");\n        constraints.gridx = 0;\n        constraints.gridy = 0;\n        panel.add(labelEvento, constraints);\n\n        fieldEventos = new JComboBox<>();\n        constraints.gridx = 1;\n        constraints.gridy = 0;\n        panel.add(fieldEventos, constraints);\n\n        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();\n        for (Evento evento : eventos) {\n            model.addElement(evento.getNome());\n        }\n        fieldEventos.setModel(model);\n\n        JLabel labelParticipante = new JLabel(\"Insira o cpf do participante presente:\");\n        constraints.gridx = 0;\n        constraints.gridy = 1;\n        panel.add(labelParticipante, constraints);\n\n        fieldParticipantes = new JTextField();\n        constraints.gridx = 1;\n        constraints.gridy = 1;\n        panel.add(fieldParticipantes, constraints);\n\n        JButton buttonRegistrarPresenca = new JButton(\"Registrar Presença\");\n        constraints.gridx = 0;\n        constraints.gridy = 2;\n        constraints.gridwidth = 2; // Aumenta a largura do botão para ocupar duas colunas\n        panel.add(buttonRegistrarPresenca, constraints);\n        buttonRegistrarPresenca.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                registrarPresenca(eventos, participantes, participantesPresentes);\n                setVisible(false);\n            }\n        });\n\n        setContentPane(panel);\n        pack();\n        setLocationRelativeTo(null);\n        setVisible(true);\n    }\n\n    public void registrarPresenca(List<Evento> eventos, List<Participante> participantes, List<Participante> participantesPresentes) {\n        String nomeEvento = (String) fieldEventos.getSelectedItem();\n        int eventoSelecionado = encontrarEventoPorNome(nomeEvento, eventos);\n\n        String cpfParticipante = fieldParticipantes.getText();\n        boolean participanteEncontrado = false;\n        for (Participante participante : participantes) {\n            if (cpfParticipante.equals(participante.getCpf())) {\n                participantesPresentes.add(participante);\n                participanteEncontrado = true;\n                break;\n            }\n        }\n\n        if (participanteEncontrado) {\n            JOptionPane.showMessageDialog(null, \"Presença registrada com sucesso!\");\n        } else {\n            JOptionPane.showMessageDialog(null, \"Participante não encontrado pelo CPF, por favor tente outro!\");\n        }\n    }\n\n\n    private int encontrarEventoPorNome(String nome, List<Evento> eventos) {\n        for (int i = 0; i < eventos.size(); i++) {\n            Evento evento = eventos.get(i);\n            if (evento.getNome().equals(nome)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n
===================================================================
diff --git a/src/views/RegistroPresencaForm.java b/src/views/RegistroPresencaForm.java
--- a/src/views/RegistroPresencaForm.java	
+++ b/src/views/RegistroPresencaForm.java	
@@ -29,7 +29,7 @@
         constraints.fill = GridBagConstraints.HORIZONTAL;
         constraints.insets = new Insets(5, 5, 10, 5);
 
-        JLabel labelEvento = new JLabel("Qual evento você quer registrar presença?");
+        JLabel labelEvento = new JLabel("Qual evento deseja-se registrar presença?");
         constraints.gridx = 0;
         constraints.gridy = 0;
         panel.add(labelEvento, constraints);
@@ -43,6 +43,7 @@
         for (Evento evento : eventos) {
             model.addElement(evento.getNome());
         }
+
         fieldEventos.setModel(model);
 
         JLabel labelParticipante = new JLabel("Insira o cpf do participante presente:");
